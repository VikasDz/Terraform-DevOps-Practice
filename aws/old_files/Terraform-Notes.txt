*Terraform For Devops Engineers Day 1*

sudo apt-get update && sudo apt-get install -y gnupg software-properties-common

wget -O- https://apt.releases.hashicorp.com/gpg | \
gpg --dearmor | \
sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null


gpg --no-default-keyring \
--keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \
--fingerprint

echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
sudo tee /etc/apt/sources.list.d/hashicorp.list

sudo apt update

sudo apt-get install terraform

terraform --version

mkdir terraform

vim local.tf
     provider+file_type name of resource
resource "local_file" "devops"{
        filename = "/home/ubuntu/terraform/devops.txt"
        content = "I m Satyam "

}

terraform validate

terraform init

terraform plan

terraform apply

you will get devops.txt file...

terraform.tfstate -- Register Files with some data

we can create multiple resources in one file... is easy

resource "local_file" "devops"{
        filename = "/home/ubuntu/terraform/devops.txt"
        content = "I m Satyam "

}

resource "random_string" "rand-str"{
length = 16
special = true

override_special = "!@#$%^&*()"

}

output "rand-str"{
value = random_string.rand-str[*].result



}

terraform state (check your state of resource where is state is change or not)

terraform(Infrastruce as tool) and ansible(Configuration management tool)

make nginx terrafrom script

terraform {
  required_providers {
    docker = {
      source  = "kreuzwerker/docker"
      version = "3.0.2"

}
}
}
provider "docker"{
}

resource "docker_image" "nginx" {
  name         = "nginx:latest"
  keep_locally = false
}


resource "docker_container" "nginx" {
  image = docker_image.nginx.image_id
  name  = "nginx-tf"
  ports {
        internal = 80
        external = 80

}
}

terraform validate

terraform init

terraform plan

terraform apply

ubuntu@ip-172-31-21-0:~/terraform/terraform-docker$ ls
main.tf  terraform.tfstate
cat terraform.tfstate

*Terraform States and Variables Explained - Day 2*

*Using Terraform we can create AWS EC2 instance*

*Terraform for_each and count with Live AWS Demo*

*Terraform Remote Backends and State File Locking Tutorial for DevOps*

Terraform State Management 
  Remote Backends 
  State Locking